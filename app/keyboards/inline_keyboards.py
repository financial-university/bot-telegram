from typing import List

from aiogram import types
from aiogram.utils.callback_data import CallbackData

from app.ruz.server import Group, Teacher
from app.model import User
from app.utils import strings


search_callback = CallbackData("sr", "menu")
groups_callback = CallbackData("g", "id", "name")
teachers_callback = CallbackData("t", "id", "name")
settings_callback = CallbackData("st", "menu")
subscribe_time_callback = CallbackData("s_t", "time", sep="|")
subscribe_day_callback = CallbackData("s_d", "day", sep="|")


async def search_keyboard(user: User) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞

    :param user:
    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)

    if user.search_id:
        keyboard_markup.row(
            types.InlineKeyboardButton(
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å",
                callback_data=search_callback.new(
                    menu="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å"
                ),
            ),
        )

    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            callback_data=search_callback.new(menu="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
            callback_data=search_callback.new(menu="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"),
        ),
    )

    return keyboard_markup


async def list_groups(groups: List[Group]) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø

    :param groups:
    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)

    for i in range(0, len(groups), 3):
        keyboard_markup.row(
            *(
                types.InlineKeyboardButton(
                    group.name,
                    callback_data=groups_callback.new(
                        id=group.id, name=group.name.replace(":", "")
                    ),
                )
                for group in groups[i : i + 3]
            )
        )

    keyboard_markup.add(
        types.InlineKeyboardButton(
            "–ù–µ –Ω–∞—à–ª–∏? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ RUZ", url="http://ruz.fa.ru/ruz"
        ),
    )

    return keyboard_markup


async def list_teacher(teachers: List[Teacher]) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

    :param teachers:
    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)

    for teacher in teachers:
        keyboard_markup.row(
            types.InlineKeyboardButton(
                teacher.name,
                callback_data=teachers_callback.new(id=teacher.id, name=teacher.name),
            )
        )

    keyboard_markup.add(
        types.InlineKeyboardButton(
            "–ù–µ –Ω–∞—à–ª–∏? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ RUZ", url="http://ruz.fa.ru/ruz"
        ),
    )
    print(keyboard_markup)
    return keyboard_markup


async def settings(user: User) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

    :param user:
    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)

    if user.role and user.search_id:
        if user.role == "teacher":
            role = "lecturer"
        else:
            role = "group"
        url = f"{strings.SUBSCRIBE_URL}?name={user.search_display}&type={role}&id={user.search_id}".replace(
            " ", "+"
        )
        keyboard_markup.row(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å üì≤", url=url,)
        )

    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            callback_data=settings_callback.new(menu="DISPLAY_SCHEDULE"),
        )
    )

    if (
        user.role
        and user.search_id
        and user.subscription_time is None
        or user.subscription_time == "CHANGES"
    ):
        keyboard_markup.row(
            types.InlineKeyboardButton(
                "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                callback_data=settings_callback.new(menu="SUBSCRIBE_CHOICE_TIME"),
            )
        )
    else:
        if user.subscription_days is not None and user.subscription_days != "CHANGES":
            if user.role and user.search_id:
                keyboard_markup.row(
                    types.InlineKeyboardButton(
                        "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                        callback_data=settings_callback.new(
                            menu="SUBSCRIBE_CHOICE_TIME"
                        ),
                    )
                )
            keyboard_markup.row(
                types.InlineKeyboardButton(
                    "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    callback_data=settings_callback.new(menu="UNSUBSCRIBE"),
                )
            )

    return keyboard_markup


async def display_in_schedule(
    show_groups: bool, show_location: bool
) -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∫–∞–∑–∞ –ø–æ–ª–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

    :param show_location:
    :param show_groups:
    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)

    keyboard_markup.row(
        types.InlineKeyboardButton(
            f"–ì—Ä—É–ø–ø—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {'‚úÖ' if show_groups is True else '‚ùå'}",
            callback_data=settings_callback.new(menu="GROUPS_IN_SCHEDULE"),
        )
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            f"–ö–æ—Ä–ø—É—Å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {'‚úÖ' if show_location is True else '‚ùå'}",
            callback_data=settings_callback.new(menu="LOCATION_IN_SCHEDULE"),
        )
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            f"–ù–∞–∑–∞–¥", callback_data=settings_callback.new(menu="CANCEL"),
        )
    )

    return keyboard_markup


async def subscribe_choice_time_keyboard() -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏

    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=3)

    keyboard_markup.row(
        types.InlineKeyboardButton(
            "7:00", callback_data=subscribe_time_callback.new(time="7:00"),
        ),
        types.InlineKeyboardButton(
            "7:30", callback_data=subscribe_time_callback.new(time="7:30"),
        ),
        types.InlineKeyboardButton(
            "8:00", callback_data=subscribe_time_callback.new(time="8:00"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "9:00", callback_data=subscribe_time_callback.new(time="9:00"),
        ),
        types.InlineKeyboardButton(
            "10:40", callback_data=subscribe_time_callback.new(time="10:40"),
        ),
        types.InlineKeyboardButton(
            "12:05", callback_data=subscribe_time_callback.new(time="12:05"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "20:00", callback_data=subscribe_time_callback.new(time="20:00"),
        ),
        types.InlineKeyboardButton(
            "21:30", callback_data=subscribe_time_callback.new(time="21:30"),
        ),
        types.InlineKeyboardButton(
            "22:00", callback_data=subscribe_time_callback.new(time="22:00"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–û—Ç–º–µ–Ω–∞", callback_data=subscribe_day_callback.new(day="–û—Ç–º–µ–Ω–∞"),
        )
    )

    return keyboard_markup


async def choice_day_keyboard() -> types.InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏

    :return:
    """

    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)

    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å",
            callback_data=subscribe_day_callback.new(day="–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å"),
        ),
        types.InlineKeyboardButton(
            "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å",
            callback_data=subscribe_day_callback.new(day="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–¢–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å",
            callback_data=subscribe_day_callback.new(day="–¢–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data=subscribe_day_callback.new(day="–≠—Ç–∞ –Ω–µ–¥–µ–ª—è"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è—å",
            callback_data=subscribe_day_callback.new(day="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"),
        ),
    )
    keyboard_markup.row(
        types.InlineKeyboardButton(
            "–û—Ç–º–µ–Ω–∞", callback_data=subscribe_day_callback.new(day="–û—Ç–º–µ–Ω–∞"),
        )
    )

    return keyboard_markup
